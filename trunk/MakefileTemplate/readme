######################################################################
##    Low Cost Vision                                               ##
##    Makefile                                                      ##
##    Readme                                                        ##
##    v0.1.1 (for Makefile 0.5.5)                                   ##
######################################################################

######################################################################
I.    Index
######################################################################

I.    Index
II.   Introduction
III.  Project structure
IV.   Usage
V.    Configuration
VI.   Notes and pitfalls
VII.  Literature

######################################################################
II.   Introduction
######################################################################

Every project in the Low Cost Vision SVN uses a Makefile to compile
and link.
Project may be of type 'binary' or 'library'.
Binary projects output a binary file that can be executed.
Library projects output a static library that may be used in other
projects.

Projects may depend on other (library) projects. For that purpose
all projects should use the same makefile and use the same directory
structure.

######################################################################
III.  Project structure
######################################################################

Every project on the Low Cost Vision SVN should use the folowing
directory structure:

+-+- project/
  |
  +--- src/
  |
  +-+- include/
  | |
  | +--- project_name/
  |
  +--- [ build/ ]
  |
  +--- [ bin/ ]
  |
  +--- [ lib/ ]
  |
  +--- Makefile

# project/
Your project resides here

# src/
All sourcefiles reside here

# include/
All headers reside here.
The submap 'project_name/' is optional but recommended, especially
in library projects.

# build/
This map is generated by make. All object- and dependecy files are
put here.

# bin/
This map is generated by make. When your project is a 
binary project the executable is put here.

# lib/
This map is generated by make. When your project is a
library project the static library is put here.

######################################################################
IV.   Usage
######################################################################

make [target]

targets:
# all (default)
Compiles and links all sourcefiles (or archives them to a static
library.)

# clean
Removes all files and possibly directories created by make.

# dep
Recursivly compiles all projects that this project depends on.

######################################################################
V.    Configuration
######################################################################

In the beginning of the makfile you will find the configuration
part. There are several macro's that are briefly explained.
Here we will describe them in more detail.

# BUILDTYPE
The type of project. may either be 'binary' or 'library'.
Projects of type binary will output an executable and projects of
type library will output a static library.

# TARGET
Name of the target binary or library. literaly translates to a binary
name. Libraries get 'lib' prefixed to them and they get a '.a'
extension. e.g.:
TARGET := example
would output 'libexample.a'.

# VPATH
Built-in macro. for it's use read the GNU Make Manual.

# CXX
Used C++ compiler e.g.: 'g++'

# CXXFLAGS
Compiler flags that you would pass to a C++ copmiler.
e.g.: -Wall, -g3, -O3

# CPPFLAGS
Preprocessor flags that you would pass to a C++ pre-processor.
e.g.: -DSOMETHING, -I/some/path/

# LFLAGS
Linker flags that you would pass to a C++ linker.
e.g.: -lopencv_core

# ARFLAGS
Arguments passed to 'ar' when archiving static libraries.

# PKGCONF_LIBRARIES
Libraries that will be resolved by pkg-config.
e.g.: opencv2

# LIBRARIES
Will be linked with '-l'. e.g.: opencv_core will expand to:
'-lopencv_core'.

# EXTINCLUDEPATHS
Include paths. Will be included using '-I'

# LINKERPATHS
Linker paths. Will be included using '-L'

# DEP_PROJ
Names of projects that this project depends on. e.g.:
Vision/FGBGSeparation, Deltarobot/huniplacer

# LCV_PROJECT_PATH (not listed in makefile)
Environment variable. the makefile searches paths listed in this
variable for projects listed in DEP_PROJ.
e.g.:
export LCV_PROJECT_PATH=~/low-cost-vision/Vision

# LCV_PROJECT_MAKEFILE(not listed in makefile)
Environment variable. Contains the path to the generic makefile

######################################################################
VI.   Notes and pitfalls
######################################################################

# All includes in project sourcecode should be made in the form of:
  #include <x.h> instead of: #include "x.h". In this way, if headers
  include another header, and they also get included in other projects
  the compiler won't get confused. Also, .../include/ is added to
  the include paths so that sourcefiles in .../src/ can include them.

# If projects you use have a dependency, you must also specify that
  dependency in your own project.
  e.g.: PROJ_A depends on opencv2, PROJ_B depends on PROJ_A. PROJ_B
  should now also depend on opencv2.

######################################################################
VII.  Literature
######################################################################

# Managing Projects with GNU Make, 3rd Edition
  by Robert Mecklenburg
  ISBN: 978-0-596-00610-5

# GNU Make Manual
  URL: http://www.gnu.org/s/make/manual/make.html

