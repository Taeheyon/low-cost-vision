#######################################################################
# low cost vision - generic make file
# This makefile will be included by a project specific Makefile
# Required configuration make file version: v1.0.0
# version: v0.5.6
#######################################################################

#######################################################################
# constants
#######################################################################

# misc settings
.SUFFIXES:
SHELL                = /bin/sh
PRINTF               = /usr/bin/printf
DEPGEN               = $(CXX) -M $(CXXFLAGS) $(CPPFLAGS) $(TARGET_ARCH)

# directories
BINDIR              := bin
LIBDIR              := lib
INCLUDEDIR          := include
SRCDIR              := src
BUILDDIR            := build

# ANSI color escapes
ifeq ($(TERM), xterm)     
ANSI_RED            := \x1B[1;31m
ANSI_YELLOW         := \x1B[1;33m
ANSI_GREEN          := \x1B[1;32m
ANSI_CYAN           := \x1B[1;36m
ANSI_BLUE           := \x1B[1;34m
ANSI_MAGENTA        := \x1B[1;35m
ANSI_RESET          := \x1B[0m
endif

# search dependency projects
# append to PROJ_DIRS
PROJ_PATHS := $(strip $(subst :, , $(LCV_PROJECT_PATH)))
DEP_PROJ   := $(strip $(DEP_PROJ))
ifeq ($(PROJ_PATHS), )
ifneq ($(DEP_PROJ), )
$(error dependency projects were specified but LCV_PROJECT_PATH is empty)
endif
endif

PROJ_DIRS  := \
	$(foreach DEP,$(DEP_PROJ), \
        $(eval DEP_FOUND := ) \
		$(foreach PATH, $(PROJ_PATHS), \
			$(if $(shell if [ -d $(PATH)/$(DEP) ] ; then echo exists; fi;), \
				$(eval DEP_FOUND := found) \
				$(PATH)/$(DEP)/) \
		) \
		$(if $(DEP_FOUND),, $(error can not find project $(DEP))) \
	)

PROJ_DIRS := $(strip $(PROJ_DIRS))

# TODO implement project dependecy generation
# generate and execute project expose script
#VOID := $(shell \
#    if [ ! -e $(BUILDDIR)/expose.sh ] ; then \
#        mkdir -p $(BUILDDIR); \
#        touch $(BUILDDIR)/expose.sh; \
#        $(MAKE) expose; \
#    fi)
#VOID := $(shell $(SHELL) $(BUILDDIR)/expose.sh)
#$(error wtf)

# make depenency projects expose their important settings
#$(foreach PRJ, $(PROJ_DIRS), $(shell $(MAKE) -C $(PRJ) expose))
#PKGCONF_LIBRARIES += $(LCV_EXP_PKGCONF_LIBRARIES)
#LIBRARIES         += $(LCV_EXP_LIBRARIES)
#EXTINCLUDEPATHS   += $(LCV_EXP_EXTINCLUDEPATHS)
#LINKERPATHS       += $(LCV_EXP_LINKERPATHS)

# check if all packages exists according pkg-config
$(foreach PKG, $(PKGCONF_LIBRARIES), \
	$(if $(subst 0,,$(shell pkg-config --exists $(PKG); echo $$?)), \
		$(error library $(PKG) was not found by pkg-config), \
	) \
)
ifneq ($(words $(PKGCONF_LIBRARIES)), 0)
CXXFLAGS += $(shell pkg-config --cflags $(PKGCONF_LIBRARIES))
LFLAGS   += $(shell pkg-config --libs $(PKGCONF_LIBRARIES))
endif

# add paths of required projects
EXTINCLUDEPATHS     := $(foreach PRJ, $(PROJ_DIRS), $(PRJ)$(INCLUDEDIR)) $(EXTINCLUDEPATHS)
LINKERPATHS         := $(foreach PRJ, $(PROJ_DIRS), $(PRJ)$(LIBDIR)) $(LINKERPATHS)
STATIC_LIB_FILES    := 
$(foreach PRJ, $(PROJ_DIRS), \
	$(foreach LIB, $(wildcard $(PRJ)$(LIBDIR)/lib*.a), \
		$(eval LIBRARIES = $(patsubst lib%.a,%,$(notdir $(LIB))) $(LIBRARIES) )\
		$(eval STATIC_LIB_FILES += $(LIB) )\
		 \
	) \
)

# append headers and sourcefiles to virtual path
VPATH               += $(foreach PTH, $(strip $(SRCDIR)) $(strip $(EXTINCLUDEPATHS)) $(strip $(INCLUDEDIR)),$(PTH):)

# list of sourcefiles
SOURCES             := $(foreach SRCFLDR, $(SRCDIR), $(wildcard $(SRCFLDR)/*.cpp))

# list of dependency files
DFILES              := $(foreach X, $(subst .cpp,.d,$(notdir $(SOURCES))), $(BUILDDIR)/$(X)) 

# list objects
OBJS                := $(foreach X, $(subst .cpp,.o,$(notdir $(SOURCES))), $(BUILDDIR)/$(X))

# list '-l' flags
LIBFLAGS            := $(foreach LIB, $(LIBRARIES), -l$(LIB))

# append external includes
CPPFLAGS            += $(foreach INC, $(EXTINCLUDEPATHS), -I$(INC))

# append local includes
CPPFLAGS            += $(foreach INC, $(INCLUDEDIR), -I$(INC))

# append '-L' paths (from LINKERPATHS) and LIBFLAGS to LFLAGS
LFLAGS              := $(foreach LP, $(LINKERPATHS), -L$(LP)) $(LIBFLAGS) $(LFLAGS)

# files removed during clean
CLEANFILES           = $(OBJS) $(DFILES) $(TARGET) $(BUILDDIR)/expose.sh

# directories removed during clean
CLEANDIRS            = $(BUILDDIR) $(BINDIR) $(LIBDIR)

# further specify target: binary or library
BUILDTYPE := $(strip $(BUILDTYPE))
ifeq ($(BUILDTYPE),binary)
TARGET := $(BINDIR)/$(TARGET)
else
ifeq ($(BUILDTYPE),library)
TARGET := $(LIBDIR)/lib$(TARGET).a
else
$(error unknown build type)
endif
endif

#######################################################################
# rules
#######################################################################

.PHONY: all
all: $(TARGET)

#.PHONY: expose
#expose:
#	@export LCV_EXP_PKGCONF_LIBRARIES=
#	@export LCV_EXP_LIBRARIES=
#	@export LCV_EXP_EXTINCLUDEPATHS=
#	@export LCV_EXP_LINKERPATHS=
#	@ERR=0; \
#	for EXP in $(PROJ_DIRS); do \
#		$(MAKE) -C "$$EXP" r_expose; \
#		if [ "$$?" -ne "0" ] ; then \
#			ERR=1; \
#			break; \
#		fi; \
#	done; \
#	if [ "$$ERR" -ne "0" ] ; then \
#		false; \
#	else \
#		true; \
#	fi
#	@export LCV_EXP_PKGCONF_LIBRARIES=$(strip $(LCV_EXP_PKGCONF_LIBRARIES)) $(PKGCONF_LIBRARIES)
#	@export LCV_EXP_LIBRARIES=$(strip $(LCV_EXP_LIBRARIES)) $(LCV_EXP_LIBRARIES)
#	@export LCV_EXP_EXTINCLUDEPATHS=$(strip $(LCV_EXP_EXTINCLUDEPATHS)) $(EXTINCLUDEPATHS)
#	@export LCV_EXP_LINKERPATHS=$(strip $(LCV_EXP_LINKERPATHS)) $(LINKERPATHS)
#	@echo 'export LCV_EXP_PKGCONF_LIBRARIES=$(LCV_EXP_PKGCONF_LIBRARIES)' > $(BUILDDIR)/expose.sh
#	@echo 'export LCV_EXP_LIBRARIES=$(LCV_EXP_LIBRARIES)' >> $(BUILDDIR)/expose.sh
#	@echo 'export LCV_EXP_EXTINCLUDEPATHS=$(LCV_EXP_EXTINCLUDEPATHS)' >> $(BUILDDIR)/expose.sh
#	@echo 'export LCV_EXP_LINKERPATHS=$(LCV_EXP_LINKERPATHS)' >> $(BUILDDIR)/expose.sh

#.PHONY: r_expose
#r_expose:
#	@ERR=0; \
#	for EXP in $(PROJ_DIRS); do \
#		$(MAKE) -C "$$EXP" r_expose; \
#		if [ "$$?" -ne "0" ] ; then \
#			ERR=1; \
#			break; \
#		fi; \
#	done; \
#	if [ "$$ERR" -ne "0" ] ; then \
#		false; \
#	else \
#		true; \
#	fi
#	@export LCV_EXP_PKGCONF_LIBRARIES=$(strip $(LCV_EXP_PKGCONF_LIBRARIES)) $(PKGCONF_LIBRARIES)
#	@export LCV_EXP_LIBRARIES=$(strip $(LCV_EXP_LIBRARIES)) $(LCV_EXP_LIBRARIES)
#	@export LCV_EXP_EXTINCLUDEPATHS=$(strip $(LCV_EXP_EXTINCLUDEPATHS)) $(EXTINCLUDEPATHS)
#	@export LCV_EXP_LINKERPATHS=$(strip $(LCV_EXP_LINKERPATHS)) $(LINKERPATHS)

# recursively make al dependency projects
.PHONY: dep
dep:
#	@if [ -e $(BUILDDIR)/expose.sh ] ; then \
#		$(PRINTF) '$(ANSI_RED)RM\t$(BUILDDIR)/expose.sh$(ANSI_RESET)\n'; \
#		rm $(BUILDDIR)/expose.sh; \
#	fi
	@ERR=0; \
	for DEP in $(PROJ_DIRS); do \
		$(MAKE) -C "$$DEP" dep; \
		if [ "$$?" -ne "0" ] ; then \
			ERR=1; \
			break; \
		fi; \
		$(MAKE) -C "$$DEP"; \
		if [ "$$?" -ne "0" ] ; then \
			ERR=1; \
			break; \
		fi; \
	done; \
	if [ "$$ERR" -ne "0" ] ; then \
		false; \
	else \
		true; \
	fi

$(BUILDDIR)/%.o: $(SRCDIR)/%.cpp | $(BUILDDIR)
	@$(PRINTF) '$(ANSI_BLUE)$(COMPILE.cpp) $(OUTPUT_OPTION) $<$(ANSI_RESET)\n'
	@$(COMPILE.cpp) $(OUTPUT_OPTION) $<

$(BUILDDIR):
	@$(PRINTF) '$(ANSI_YELLOW)MKDIR\t$@$(ANSI_RESET)\n'
	@-mkdir -p $(BUILDDIR)

-include $(DFILES)

$(BUILDDIR)/%.d: $(SRCDIR)/%.cpp | $(BUILDDIR)
	@$(PRINTF) '$(ANSI_CYAN)D\t$@$(ANSI_RESET)\n'
	@$(DEPGEN) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,$(BUILDDIR)\/\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

# create different rules for binary and library projects
ifeq ($(BUILDTYPE),binary)
$(TARGET): $(OBJS) $(STATIC_LIB_FILES) | $(BINDIR)
	@$(PRINTF) '$(ANSI_GREEN)$(CXX) $(OBJS) -o $@ $(LFLAGS)$(ANSI_RESET)\n'
	@$(CXX) $(OBJS) -o $@ $(LFLAGS)

$(BINDIR):
	@$(PRINTF) '$(ANSI_YELLOW)MKDIR\t$@$(ANSI_RESET)\n'
	@-mkdir -p $(BINDIR)
else
ifeq ($(BUILDTYPE),library)
$(TARGET): $(OBJS) | $(LIBDIR)
	@$(PRINTF) '$(ANSI_MAGENTA)AR\t$@$(ANSI_RESET)\n'
	@ar r $(ARFLAGS) $@ $^

$(LIBDIR):
	@$(PRINTF) '$(ANSI_YELLOW)MKDIR\t$@$(ANSI_RESET)\n'
	@-mkdir -p $(LIBDIR)
endif
endif

.PHONY: clean
clean:
	@$(foreach FILE, $(strip $(CLEANFILES)),\
		if [ -e $(FILE) ] ; then \
			$(PRINTF) '$(ANSI_RED)RM\t$(FILE)$(ANSI_RESET)\n'; \
			rm $(FILE); \
		fi;\
	)
	@$(foreach DIR, $(strip $(CLEANDIRS)),\
		if [ -d $(DIR) ] ; then \
			$(PRINTF) '$(ANSI_RED)RMDIR\t$(DIR)$(ANSI_RESET)\n'; \
			rmdir -p $(DIR); \
		fi;\
	) true
